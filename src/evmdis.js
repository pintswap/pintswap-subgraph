'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.disassemble = exports.toByteArray = exports.leftZeroPad = exports.addHexPrefix = exports.instructions = void 0;
var InstructionDescriptor = /** @class */ (function () {
    function InstructionDescriptor(name, values) {
        this.values = [0].concat(values);
        this.name = name;
    }
    return InstructionDescriptor;
}());
exports.instructions = new Map();
exports.instructions.set("10", new InstructionDescriptor("LT", [3, 2, 1, 0]));
exports.instructions.set("11", new InstructionDescriptor("GT", [3, 2, 1, 0]));
exports.instructions.set("12", new InstructionDescriptor("SLT", [3, 2, 1, 0]));
exports.instructions.set("13", new InstructionDescriptor("SGT", [3, 2, 1, 0]));
exports.instructions.set("14", new InstructionDescriptor("EQ", [3, 2, 1, 0]));
exports.instructions.set("15", new InstructionDescriptor("ISZERO", [3, 1, 1, 0]));
exports.instructions.set("16", new InstructionDescriptor("AND", [3, 2, 1, 0]));
exports.instructions.set("17", new InstructionDescriptor("OR", [3, 2, 1, 0]));
exports.instructions.set("18", new InstructionDescriptor("XOR", [3, 2, 1, 0]));
exports.instructions.set("19", new InstructionDescriptor("NOT", [3, 2, 1, 0]));
exports.instructions.set("20", new InstructionDescriptor("SHA3", [30, 2, 1, 0]));
exports.instructions.set("30", new InstructionDescriptor("ADDRESS", [2, 0, 1, 0]));
exports.instructions.set("31", new InstructionDescriptor("BALANCE", [400, 1, 1, 0]));
exports.instructions.set("32", new InstructionDescriptor("ORIGIN", [2, 0, 1, 0]));
exports.instructions.set("33", new InstructionDescriptor("CALLER", [2, 0, 1, 0]));
exports.instructions.set("34", new InstructionDescriptor("CALLVALUE", [2, 0, 1, 0]));
exports.instructions.set("35", new InstructionDescriptor("CALLDATALOAD", [3, 1, 1, 0]));
exports.instructions.set("36", new InstructionDescriptor("CALLDATASIZE", [2, 0, 1, 0]));
exports.instructions.set("37", new InstructionDescriptor("CALLDATACOPY", [3, 3, 0, 0]));
exports.instructions.set("38", new InstructionDescriptor("CODESIZE", [2, 0, 1, 0]));
exports.instructions.set("39", new InstructionDescriptor("CODECOPY", [3, 3, 0, 0]));
exports.instructions.set("40", new InstructionDescriptor("BLOCKHASH", [20, 1, 1, 0]));
exports.instructions.set("41", new InstructionDescriptor("COINBASE", [2, 0, 1, 0]));
exports.instructions.set("42", new InstructionDescriptor("TIMESTAMP", [2, 0, 1, 0]));
exports.instructions.set("43", new InstructionDescriptor("NUMBER", [2, 0, 1, 0]));
exports.instructions.set("44", new InstructionDescriptor("DIFFICULTY", [2, 0, 1, 0]));
exports.instructions.set("45", new InstructionDescriptor("GASLIMIT", [2, 0, 1, 0]));
exports.instructions.set("50", new InstructionDescriptor("POP", [2, 1, 0, 0]));
exports.instructions.set("51", new InstructionDescriptor("MLOAD", [3, 1, 1, 0]));
exports.instructions.set("52", new InstructionDescriptor("MSTORE", [3, 2, 0, 0]));
exports.instructions.set("53", new InstructionDescriptor("MSTORE8", [3, 2, 0, 0]));
exports.instructions.set("54", new InstructionDescriptor("SLOAD", [200, 1, 1, 0]));
exports.instructions.set("55", new InstructionDescriptor("SSTORE", [0, 2, 0, 0]));
exports.instructions.set("56", new InstructionDescriptor("JUMP", [8, 1, 0, 0]));
exports.instructions.set("57", new InstructionDescriptor("JUMPI", [10, 2, 0, 0]));
exports.instructions.set("58", new InstructionDescriptor("PC", [2, 0, 1, 0]));
exports.instructions.set("59", new InstructionDescriptor("MSIZE", [2, 0, 1, 0]));
exports.instructions.set("60", new InstructionDescriptor("PUSH1", [3, 0, 1, 1]));
exports.instructions.set("61", new InstructionDescriptor("PUSH2", [3, 0, 1, 2]));
exports.instructions.set("62", new InstructionDescriptor("PUSH3", [3, 0, 1, 3]));
exports.instructions.set("63", new InstructionDescriptor("PUSH4", [3, 0, 1, 4]));
exports.instructions.set("64", new InstructionDescriptor("PUSH5", [3, 0, 1, 5]));
exports.instructions.set("65", new InstructionDescriptor("PUSH6", [3, 0, 1, 6]));
exports.instructions.set("66", new InstructionDescriptor("PUSH7", [3, 0, 1, 7]));
exports.instructions.set("67", new InstructionDescriptor("PUSH8", [3, 0, 1, 8]));
exports.instructions.set("68", new InstructionDescriptor("PUSH9", [3, 0, 1, 9]));
exports.instructions.set("69", new InstructionDescriptor("PUSH10", [3, 0, 1, 10]));
exports.instructions.set("70", new InstructionDescriptor("PUSH17", [3, 0, 1, 17]));
exports.instructions.set("71", new InstructionDescriptor("PUSH18", [3, 0, 1, 18]));
exports.instructions.set("72", new InstructionDescriptor("PUSH19", [3, 0, 1, 19]));
exports.instructions.set("73", new InstructionDescriptor("PUSH20", [3, 0, 1, 20]));
exports.instructions.set("74", new InstructionDescriptor("PUSH21", [3, 0, 1, 21]));
exports.instructions.set("75", new InstructionDescriptor("PUSH22", [3, 0, 1, 22]));
exports.instructions.set("76", new InstructionDescriptor("PUSH23", [3, 0, 1, 23]));
exports.instructions.set("77", new InstructionDescriptor("PUSH24", [3, 0, 1, 24]));
exports.instructions.set("78", new InstructionDescriptor("PUSH25", [3, 0, 1, 25]));
exports.instructions.set("79", new InstructionDescriptor("PUSH26", [3, 0, 1, 26]));
exports.instructions.set("80", new InstructionDescriptor("DUP1", [3, 0, 1, 0]));
exports.instructions.set("81", new InstructionDescriptor("DUP2", [3, 0, 1, 0]));
exports.instructions.set("82", new InstructionDescriptor("DUP3", [3, 0, 1, 0]));
exports.instructions.set("83", new InstructionDescriptor("DUP4", [3, 0, 1, 0]));
exports.instructions.set("84", new InstructionDescriptor("DUP5", [3, 0, 1, 0]));
exports.instructions.set("85", new InstructionDescriptor("DUP6", [3, 0, 1, 0]));
exports.instructions.set("86", new InstructionDescriptor("DUP7", [3, 0, 1, 0]));
exports.instructions.set("87", new InstructionDescriptor("DUP8", [3, 0, 1, 0]));
exports.instructions.set("88", new InstructionDescriptor("DUP9", [3, 0, 1, 0]));
exports.instructions.set("89", new InstructionDescriptor("DUP10", [3, 0, 1, 0]));
exports.instructions.set("90", new InstructionDescriptor("SWAP1", [3, 0, 0, 0]));
exports.instructions.set("91", new InstructionDescriptor("SWAP2", [3, 0, 0, 0]));
exports.instructions.set("92", new InstructionDescriptor("SWAP3", [3, 0, 0, 0]));
exports.instructions.set("93", new InstructionDescriptor("SWAP4", [3, 0, 0, 0]));
exports.instructions.set("94", new InstructionDescriptor("SWAP5", [3, 0, 0, 0]));
exports.instructions.set("95", new InstructionDescriptor("SWAP6", [3, 0, 0, 0]));
exports.instructions.set("96", new InstructionDescriptor("SWAP7", [3, 0, 0, 0]));
exports.instructions.set("97", new InstructionDescriptor("SWAP8", [3, 0, 0, 0]));
exports.instructions.set("98", new InstructionDescriptor("SWAP9", [3, 0, 0, 0]));
exports.instructions.set("99", new InstructionDescriptor("SWAP10", [3, 0, 0, 0]));
exports.instructions.set("00", new InstructionDescriptor("STOP", [0, 0, 0, 0]));
exports.instructions.set("01", new InstructionDescriptor("ADD", [3, 2, 1, 0]));
exports.instructions.set("02", new InstructionDescriptor("MUL", [5, 2, 1, 0]));
exports.instructions.set("03", new InstructionDescriptor("SUB", [3, 2, 1, 0]));
exports.instructions.set("04", new InstructionDescriptor("DIV", [5, 2, 1, 0]));
exports.instructions.set("05", new InstructionDescriptor("SDIV", [5, 2, 1, 0]));
exports.instructions.set("06", new InstructionDescriptor("MOD", [5, 2, 1, 0]));
exports.instructions.set("07", new InstructionDescriptor("SMOD", [5, 2, 1, 0]));
exports.instructions.set("08", new InstructionDescriptor("ADDMOD", [8, 3, 1, 0]));
exports.instructions.set("09", new InstructionDescriptor("MULMOD", [8, 3, 1, 0]));
exports.instructions.set("0a", new InstructionDescriptor("EXP", [10, 2, 1, 0]));
exports.instructions.set("0b", new InstructionDescriptor("SIGNEXTEND", [5, 2, 1, 0]));
exports.instructions.set("1a", new InstructionDescriptor("BYTE", [3, 2, 1, 0]));
exports.instructions.set("3a", new InstructionDescriptor("GASPRICE", [2, 0, 1, 0]));
exports.instructions.set("3b", new InstructionDescriptor("EXTCODESIZE", [700, 1, 1, 0]));
exports.instructions.set("3c", new InstructionDescriptor("EXTCODECOPY", [700, 4, 0, 0]));
exports.instructions.set("3d", new InstructionDescriptor("RETURNDATASIZE", [2, 0, 1, 0]));
exports.instructions.set("3e", new InstructionDescriptor("RETURNDATACOPY", [3, 3, 0, 0]));
exports.instructions.set("5a", new InstructionDescriptor("GAS", [2, 0, 1, 0]));
exports.instructions.set("5b", new InstructionDescriptor("JUMPDEST", [1, 0, 0, 0]));
exports.instructions.set("f0", new InstructionDescriptor("CREATE", [32000, 3, 1, 0]));
exports.instructions.set("f5", new InstructionDescriptor("CREATE2", [32000, 4, 1, 0]));
exports.instructions.set("f1", new InstructionDescriptor("CALL", [700, 7, 1, 0]));
exports.instructions.set("f2", new InstructionDescriptor("CALLCODE", [700, 7, 1, 0]));
exports.instructions.set("f3", new InstructionDescriptor("RETURN", [0, 2, 0, 0]));
exports.instructions.set("fd", new InstructionDescriptor("REVERT", [0, 2, 0, 0]));
exports.instructions.set("f4", new InstructionDescriptor("DELEGATECALL", [700, 6, 1, 0]));
exports.instructions.set("fa", new InstructionDescriptor("STATICCALL", [700, 6, 1, 0]));
exports.instructions.set("ff", new InstructionDescriptor("SELFDESTRUCT", [5000, 1, 0, 0]));
exports.instructions.set("6a", new InstructionDescriptor("PUSH11", [3, 0, 1, 11]));
exports.instructions.set("6b", new InstructionDescriptor("PUSH12", [3, 0, 1, 12]));
exports.instructions.set("6c", new InstructionDescriptor("PUSH13", [3, 0, 1, 13]));
exports.instructions.set("6d", new InstructionDescriptor("PUSH14", [3, 0, 1, 14]));
exports.instructions.set("6e", new InstructionDescriptor("PUSH15", [3, 0, 1, 15]));
exports.instructions.set("6f", new InstructionDescriptor("PUSH16", [3, 0, 1, 16]));
exports.instructions.set("7a", new InstructionDescriptor("PUSH27", [3, 0, 1, 27]));
exports.instructions.set("7b", new InstructionDescriptor("PUSH28", [3, 0, 1, 28]));
exports.instructions.set("7c", new InstructionDescriptor("PUSH29", [3, 0, 1, 29]));
exports.instructions.set("7d", new InstructionDescriptor("PUSH30", [3, 0, 1, 30]));
exports.instructions.set("7e", new InstructionDescriptor("PUSH31", [3, 0, 1, 31]));
exports.instructions.set("7f", new InstructionDescriptor("PUSH32", [3, 0, 1, 32]));
exports.instructions.set("8a", new InstructionDescriptor("DUP11", [3, 0, 1, 0]));
exports.instructions.set("8b", new InstructionDescriptor("DUP12", [3, 0, 1, 0]));
exports.instructions.set("8c", new InstructionDescriptor("DUP13", [3, 0, 1, 0]));
exports.instructions.set("8d", new InstructionDescriptor("DUP14", [3, 0, 1, 0]));
exports.instructions.set("8e", new InstructionDescriptor("DUP15", [3, 0, 1, 0]));
exports.instructions.set("8f", new InstructionDescriptor("DUP16", [3, 0, 1, 0]));
exports.instructions.set("9a", new InstructionDescriptor("SWAP11", [3, 0, 0, 0]));
exports.instructions.set("9b", new InstructionDescriptor("SWAP12", [3, 0, 0, 0]));
exports.instructions.set("9c", new InstructionDescriptor("SWAP13", [3, 0, 0, 0]));
exports.instructions.set("9d", new InstructionDescriptor("SWAP14", [3, 0, 0, 0]));
exports.instructions.set("9e", new InstructionDescriptor("SWAP15", [3, 0, 0, 0]));
exports.instructions.set("9f", new InstructionDescriptor("SWAP16", [3, 0, 0, 0]));
exports.instructions.set("a0", new InstructionDescriptor("LOG0", [375, 2, 0, 0]));
exports.instructions.set("a1", new InstructionDescriptor("LOG1", [375, 3, 0, 0]));
exports.instructions.set("a2", new InstructionDescriptor("LOG2", [375, 4, 0, 0]));
exports.instructions.set("a3", new InstructionDescriptor("LOG3", [375, 5, 0, 0]));
exports.instructions.set("a4", new InstructionDescriptor("LOG4", [375, 6, 0, 0]));
var addHexPrefix = function (s) { return (s.substr(0, 2) === "0x" ? s : "0x" + s); };
exports.addHexPrefix = addHexPrefix;
var leftZeroPad = function (s, n) {
    return "0".repeat(n - s.length) + s;
};
exports.leftZeroPad = leftZeroPad;
function toByteArray(s) {
    var result = [];
    for (var i = 0; i < s.length; i += 2) {
        result.push(s.substr(i * 2, 2));
    }
    return result;
}
exports.toByteArray = toByteArray;
function disassemble(bytes) {
    bytes = (0, exports.addHexPrefix)(bytes).substr(2);
    var bytesArray = toByteArray(bytes);
    var i = 0;
    var seqs = [];
    while (i < bytesArray.length) {
        var op = exports.instructions.has(bytesArray[i]) ? exports.instructions.get(bytesArray[i]) : new InstructionDescriptor('INVALID', [0]);
        var addrHex = i.toString(16);
        var bytesAppended = bytesArray.slice(i + 1, i + 1 + op.values[op.values.length - 1]).join('');
        seqs.push([(0, exports.addHexPrefix)((0, exports.leftZeroPad)(addrHex, addrHex.length + (addrHex.length % 2))), op.name, (bytesAppended ? '0x' + bytesAppended : ''), (0, exports.addHexPrefix)(bytesArray[i])]);
        i += 1 + op.values[op.values.length - 1];
    }
    return seqs.map(function (v, i, ary) {
        var addrHex = v[0];
        var op = v[1];
        var bytes = v[2];
        var opByte = v[3];
        return [op, opByte, addrHex, (0, exports.addHexPrefix)(bytes)];
    });
}
exports.disassemble = disassemble;
;
